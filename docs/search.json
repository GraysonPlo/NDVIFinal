[
  {
    "objectID": "modisproject.html",
    "href": "modisproject.html",
    "title": "",
    "section": "",
    "text": "This project was created with the help of the tutorial below:\nhttps://jdmwhite.github.io/Intro_to_Spatial/NDVI_time_series.html\nThe study area for this project is Western Morro Bay in the Estuary. It is located in the area below.\n\nI began with installing all of the needed packages below.\n\n# install.packages(\"MODISTools\")\n# install.packages(\"tidyverse\")\n# install.packages(\"terra\")\n# install.packages(\"lubridate\")\n# install.packages(\"animation\")\n# install.packages(\"gganimate\")\n\nAfter installing, I used the library function in order to allow my project, and following R code to be able to identify function within each package\n\nlibrary(MODISTools)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(terra)\n\nterra 1.8.50\n\nAttaching package: 'terra'\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nlibrary(lubridate)\nlibrary(animation)\nlibrary(gganimate)\n\n\nAttaching package: 'gganimate'\n\nThe following object is masked from 'package:terra':\n\n    animate\n\n\nFirst I started with utilizing MODISTools. I needed to look at what dates had available area for a specific area. I went on google maps and selected the Morro Bay area in San Luis Obispo County. I then took the lat/long from google maps and put it into the tool. The tool mt_dates lists all dates that MODIS has data for. Using the VNP13A1 product, I was able to search specifically for NDVI bands as well as a few other bands.\n\ndates &lt;- mt_dates(product = \"VNP13A1\", lat = 35.339467, lon = -120.826453)\nhead(dates)\n\n  modis_date calendar_date\n1   A2012017    2012-01-17\n2   A2012025    2012-01-25\n3   A2012033    2012-02-02\n4   A2012041    2012-02-10\n5   A2012049    2012-02-18\n6   A2012057    2012-02-26\n\n\nNext, I must extract the data/dataframes for each data within a specific range. Below is the inputted lat/long as well as utilizing that product again. The new part of the code this time is from the MODISTools subset, I input the data range that I want data extracted from. I also pull the dimensions of the area from the center of tat lat/long that I provided.\n\nslo_ndvi &lt;- mt_subset(product = \"VNP13A1\",\n                          lat = 35.339467,\n                          lon =  -120.826453,\n                          band = c(\"500_m_16_days_NDVI\",\n                                   \"500_m_16_days_pixel_reliability\"),\n                          start = \"2023-01-01\",\n                          end = \"2023-12-30\",\n                          km_lr = 25,\n                          km_ab = 40,\n                          site_name = \"SLO\",\n                          internal = TRUE,\n                          progress = TRUE)\n\nDownloading chunks:\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |======================================================================| 100%\n\n\nDownloading chunks:\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |======================================================================| 100%\n\n\nThis portion below is used for the NDVI median that I will provide at the end. Specifically this code was modified off of the following GITHUB: https://jdmwhite.github.io/Intro_to_Spatial/NDVI_time_series.html. This code utilizes the slo_ndvi that was pulled from MODIS above. Then it pipelines the data through the 500m NDVI band, then groups it by day of the year, then takes the median from the dataset. In the end the pipeline outputs the slo_med_ndvi.\n\n# Summarise\nslo_ndvi %&gt;% \n  filter(band == \"500_m_16_days_NDVI\") %&gt;%\n  group_by(calendar_date) %&gt;%\n  summarise(doy = yday(as_date(calendar_date)),\n            ndvi_median = median(value * as.numeric(scale))) %&gt;% \n  distinct(doy, .keep_all = TRUE) -&gt; slo_med_ndvi\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'calendar_date'. You can override using the\n`.groups` argument.\n\n\nUtilizing the slo_med_ndvi and ggplot, we input the refined data and plot it by doy(date of year) and the median NDVI. The line in the middle is showing the average change, between the median in order to smooth the data.\n\n# Plot\nggplot(slo_med_ndvi, aes(x = doy, y = ndvi_median)) +\n  geom_point() +\n  geom_smooth(method = 'loess') +\n  labs(x = 'Day of Year', y = 'NDVI (median)') +\n  theme_classic() \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThis line is utilized to create the plot’s export and downloads it into my exports folder.\nggsave('Exports/slo_med_ndvi.png',\n        create.dir = TRUE ,\n       width = 120, height = 80, units = c('mm'), dpi = 'retina', bg = 'white')\n\nThis next portion was mainly taken from the tutorial but updated by me in order allow it to apply to this project specifically. The following R code utilizes ggplot and animation in order to create a gif that shows the change in the median NDVI overtime by day in accordance to the month.\n\nanim_ts &lt;- ggplot(slo_med_ndvi, aes(x = as_date(calendar_date), y = ndvi_median)) +\n  geom_point(aes(group = seq_along(doy), col = ndvi_median)) +\n  geom_line(aes(col = ndvi_median), lwd = 1) +\n  scale_colour_gradientn(colours = rev(terrain.colors(7)),limits = c(0,1), breaks = seq(0,1,0.25)) +\n  scale_x_date(breaks = scales::date_breaks('months'),labels = scales::date_format('%b')) +\n  scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.25)) +\n  labs(x = 'Date', y = 'NDVI (median)',\n       title = 'Morro Bay Estuary NDVI over 2023',\n       subtitle = 'VIIRS/S-NPP Vegetation Indices 16-Day 500m') +\n  theme_classic() +\n  theme(legend.position = 'none') +\n  gganimate::transition_reveal(doy)   \n\nThis code actually animates the gif to a set framing and fps which then renders it out into the same exports folder that was used before. This is how I finalized creating the NDVI plot gif that is provided.\nanim_ts_param &lt;- gganimate::animate(anim_ts, fps = 10,\n                   width = 720, height = 480,\n                   res = 150,\n                   renderer = gifski_renderer(\"Exports/animation2.gif\"))\n\nNow to create the plotted raster gif the following code was utilized.\nI then took the slo_ndvi data, which in this form is just the raw data, from before the plotting on the graph. Then through the filter() function I was also able to filter out the specific NDVI band. I resulted in the slo_filter.\n\nslo_filter &lt;- filter(slo_ndvi, band == \"500_m_16_days_NDVI\")\n\nUsing the slo_filter I input this in to the MODISTools to terra function which ultimately takes a MODISTools dataframe, which is specific to this package. Then it converts it into a terra raster. The export from this was modisrast.\n\nmodisrast &lt;- mt_to_terra(df = slo_filter)\n\nTo test to make sure that this was working I selected a specific raster that was provided. I typed names(modisrast) to find all of the raster names into the console within R studio. I selected at random and chose the date 2023-12-19 just to test proof of concept and plotting.\n\nplot(modisrast[\"2023-12-19\"]) \n\n\n\n\n\n\n\n\nNow that I know that my raster has been successfully converted from the MODISTools dataframe I was able to attempt to throw this into a code that will provide a gif over the full year. Using the animation package, and a bit of help from chatgpt to actually get the syntax for this package as I have not used it before, I was able to have this code. The code selects the dates from the modisrast list, then by name (that being the dates) each one is pulled in. From this, the package creates the gif, and R studio opens it locally to be saved.\n\nsaveGIF({\n  for (i in 1:nlyr(modisrast)) {\n    plot(modisrast[[i]], main = names(modisrast)[i])\n  }\n}, movie.name = \"modis_terra.gif\", interval = 0.5)\n\nOutput at: modis_terra.gif\n\n\n[1] TRUE\n\n\n\nIn the future it would be beneficial to do the following: Create the NDVI final deliverable with NDVI in median. For this current project, R and MODIS due to specific dataframe types was returning empty rasters, due to empty data frames. Also applying this skill to a new study area would be a great way to expand upon this in the future."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Redirecting…",
    "section": "",
    "text": "&lt;meta http-equiv=“refresh” content=“0”; url=/modisproject.html&gt;"
  }
]